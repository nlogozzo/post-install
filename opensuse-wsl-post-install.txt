# NOTE
# Replace 'nlogozzo' with your WSL username
# Replace 'nlogo' with your Windows username (Found in C:\Users)
# ICON: https://raw.githubusercontent.com/openSUSE/static.opensuse.org/master/favicon.ico

# Before starting, make sure WSL is running the latest version
# In PowerShell run the following:
wsl.exe --update

# Update
sudo zypper refresh
sudo zypper dup
sudo zypper install nano zsh
sudo zypper install -t pattern wsl_gui wsl_base wsl_systemd

# Ensure Systemd
sudo nano /etc/wsl.conf
# Add the following lines:
[boot]
systemd=true

# Restart WSL
# In PowerShell run the following:
wsl.exe --shutdown
# Start distro again

# Setup ZSH
if command -v curl >/dev/null 2>&1; then
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/romkatv/zsh4humans/v5/install)"
else
  sh -c "$(wget -O- https://raw.githubusercontent.com/romkatv/zsh4humans/v5/install)"
fi
sed -i '/z4h install ohmyzsh\/ohmyzsh || return/a fastfetch' ~/.zshrc
echo 'alias system-update="sudo zypper refresh; sudo zypper dup; flatpak --user update; sudo zypper clean"' >> ~/.zshrc
echo 'export AURA_DISABLE_NETCHECK=true' >> ~/.zshrc
echo 'path+=~/.dotnet/tools' >> ~/.zshrc

# Setup Repos
sudo zypper -n install libicu wget
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ntype=rpm-md\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/zypp/repos.d/vscode.repo'
wget https://packages.microsoft.com/config/opensuse/15/prod.repo
sudo mv prod.repo /etc/zypp/repos.d/microsoft-prod.repo
sudo chown root:root /etc/zypp/repos.d/microsoft-prod.repo
sudo rpm --import https://rpm.packages.shiftkey.dev/gpg.key
sudo sh -c 'echo -e "[shiftkey-packages]\nname=GitHub Desktop\nbaseurl=https://rpm.packages.shiftkey.dev/rpm/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://rpm.packages.shiftkey.dev/gpg.key" > /etc/zypp/repos.d/shiftkey-packages.repo'
sudo zypper -n addrepo https://download.opensuse.org/repositories/home:Dead_Mozay/openSUSE_Tumbleweed/home:Dead_Mozay.repo
sudo zypper refresh
sudo zypper dup

# Install Software
sudo zypper install opi git git-lfs gcc gcc-c++ clang-tools rust cmake meson ninja dotnet-sdk-8.0 dotnet-runtime-8.0 java-17-openjdk blueprint-compiler webp-pixbuf-loader fastfetch curl unzip cabextract fontconfig python311-python-lsp-server ffmpeg aria2 yt-dlp yelp yelp-tools yelp-xsl cava intltool gnuplot chromaprint-fpcalc libchromaprint1 nodejs20 npm20 dblatex xmlgraphics-fop mm-common ruby tomcat flatpak flatpak-builder libxml2 libblas3 lapack liblapack3 fftw3 libidn2 adw-gtk3 adw-gtk3-dark docker distrobox gnome-keyring xdg-user-dirs xdg-user-dirs-gtk python311-requirements-parser python311-pybind11
sudo zypper install java-17-openjdk-devel gtk4-devel libadwaita-devel glib2-devel libcurl-devel python311-devel openssl-devel gettext-devel libxml2-devel libsecret-devel libuuid-devel libpodofo-devel libboost_date_time-devel python311-pybind11-devel

# Setup User
sudo usermod -a -G tomcat $USER
sudo usermod -a -G lp $USER
sudo usermod -a -G docker $USER
xdg-user-dirs-update
xdg-user-dirs-gtk-update

# Restart WSL
# In PowerShell run the following:
wsl.exe --shutdown
# Start distro again

# Flatpak
# NOTE: Flatpak on opensuse should be run in user mode as your user is not "administrator" in OpenSuse
flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak --user remote-add --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo
flatpak --user update
flatpak --user install -y flathub org.gnome.Sdk//46 org.gnome.Platform//46 org.gtk.Gtk3theme.adw-gtk3 org.gtk.Gtk3theme.adw-gtk3-dark org.nickvision.tagger org.nickvision.tubeconverter org.nickvision.money org.nickvision.cavalier re.sonny.Workbench org.gnome.design.IconLibrary com.github.tchx84.Flatseal

# Setup Fonts
gsettings set org.gnome.desktop.interface font-name 'Cantarell 11'
gsettings set org.gnome.desktop.interface gtk-theme 'adw-gtk3-dark'
gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'

# Setup Locale
sudo localectl set-locale LANG=en_US.UTF-8

# Setup Git
git config --global submodule.recurse true
git config --global protocol.file.allow always
git config --global http.postBuffer 524288000

# Setup Dotnet
dotnet tool install --global Cake.Tool
dotnet tool install --global GetText.NET.Extractor
dotnet tool install --global JetBrains.ReSharper.GlobalTools
dotnet tool install --global Nickvision.FlatpakGenerator

# Install C++ Libraries
# gtest
echo "Gtest..."
cd ~
git clone --depth 1 --branch "v1.14.0" https://github.com/google/googletest
mkdir -p googletest/build
cd googletest/build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
cmake --build .
sudo cmake --install .
rm -rf ~/googletest
# jsoncpp
echo "Jsoncpp..."
cd ~
git clone --depth 1 --branch "1.9.5" https://github.com/open-source-parsers/jsoncpp
mkdir -p jsoncpp/build
cd jsoncpp/build
cmake .. -DCMAKE_BUILD_TYPE=Release -DJSONCPP_WITH_TESTS="OFF" -DJSONCPP_WITH_CMAKE_PACKAGE="ON" -DCMAKE_INSTALL_PREFIX=/usr
cmake --build .
sudo cmake --install .
rm -rf ~/jsoncpp
# maddy
echo "Maddy..."
cd ~
git clone --depth 1 --branch "1.3.0" https://github.com/progsource/maddy
sudo mkdir -p /usr/include/maddy
sudo mv maddy/include/maddy/* /usr/include/maddy
rm -rf ~/maddy
# rapidcsv
echo "Rapidcsv..."
cd ~
git clone --depth 1 --branch "v8.83" https://github.com/d99kris/rapidcsv
mkdir -p rapidcsv/build
cd rapidcsv/build
cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
sudo cmake --install .
rm -rf ~/rapidcsv
# libxml++
echo "Libxml++..."
cd ~
git clone --depth 1 --branch "5.2.0" https://github.com/libxmlplusplus/libxmlplusplus
cd libxmlplusplus
meson setup --prefix /usr --libdir lib64 --reconfigure -Dmaintainer-mode=false out-linux .
cd out-linux
ninja
sudo ninja install
rm -rf ~/libxmlplusplus
# libnick
echo "Libnick..."
cd ~
git clone --depth 1 --branch "2024.7.0" https://github.com/NickvisionApps/libnick/
mkdir -p libnick/build
cd libnick/build
cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING="OFF" -DCMAKE_INSTALL_PREFIX=/usr
cmake --build .
sudo cmake --install .
rm -rf ~/libnick
cd ~

# Setup Winhome Link
ln -s /mnt/c/Users/nlogo ~/winhome

# Restart WSL
# In PowerShell run the following:
wsl.exe --shutdown
# Start distro again

# If ever needed, here is the command to reinstall all installed packages
# zypper in -f $(rpm -q -a --qf '%{NAME} ')

# ENJOY!
